// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  name                  String?
  email                 String    @unique
  phoneNumber           String?
  password              String
  emailVerifiedAt       DateTime?
  phoneNumberVerifiedAt DateTime?
  balance               Float     @default(0)
  profilePicture        String?
  lastLogin             DateTime?
  lastPasswordChange    DateTime?
  status                String    @default("ACTIVE")
  twoFactorEnabled      Boolean   @default(false)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  Wishlist         Wishlist[]
  Notification     Notification[]
  Transaction      Transaction[]
  Session          Session[]
  ActvitiyLog      ActvitiyLog[]
  SearchHistory    SearchHistory[]
  SupportTicket    SupportTicket[]
  VerificationCode VerificationCode[]
}

model VerificationCode {
  id        Int              @id @default(autoincrement())
  userId    Int
  code      String
  type      VerificationType
  expiresAt DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum VerificationType {
  CONFIRM_BY_EMAIL
  CONFIRM_BY_PHONE
  RESET_BY_EMAIL
  RESET_BY_PHONE
}

model Session {
  id          Int      @id @default(autoincrement())
  userId      Int
  ipAddress   String
  token       String   @unique // Token to identify the session
  expiresAt   DateTime // Expiration date for the session
  browserInfo String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Phone {
  id          Int    @id @default(autoincrement())
  brand       String
  model       String
  brandId     Int?
  modelId     Int?
  storage     String
  price       Float
  description String
  userId      Int

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  Wishlist  Wishlist[]
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Devvices {
  id   Int    @id @default(autoincrement())
  name String

  brand   String?
  brandId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Wishlist {
  id      Int @id @default(autoincrement())
  userId  Int
  phoneId Int

  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  phone Phone @relation(fields: [phoneId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  listingId  Int
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
}

model Admin {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String // Store hashed password
  role     AdminRole @default(MANAGER)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AdminAction AdminAction[]
}

enum AdminRole {
  MANAGER
  MODERATOR
}

model Transaction {
  id              Int             @id @default(autoincrement())
  userId          Int
  amount          Float
  transactionType TransactionType // Enum to specify transaction type (e.g., "CREDIT", "DEBIT")
  createdAt       DateTime        @default(now())

  User User @relation(fields: [userId], references: [id])
}

enum TransactionType {
  CREDIT
  DEBIT
}

model Coupon {
  id            Int       @id @default(autoincrement())
  code          String    @unique
  discountValue Float // e.g., percentage or flat amount
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())

  isActive Boolean @default(true)
}

// model Feedback {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   listingId Int?
//   rating    Int // Rating scale (1-5)
//   comment   String?
//   createdAt DateTime @default(now())

//   user    User     @relation(fields: [userId], references: [id])
// listing Listing? @relation(fields: [listingId], references: [id])
// }

model ActvitiyLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String // e.g., "LOGIN", "PURCHASE", "LISTING_CREATED"
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  adminId   Int
  action    String // e.g., "DELETE_USER", "APPROVE_LISTING"
  createdAt DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])
}

model SearchHistory {
  id         Int      @id @default(autoincrement())
  userId     Int
  searchTerm String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id          Int          @id @default(autoincrement())
  userId      Int
  subject     String
  description String
  status      TicketStatus // Enum for ticket status
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
